module App exposing (..)

import Dict exposing (..)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.App as App
import Common.Input as Input
import String
import Regex
import Debug


-- Input wrapper (this should be kind of autogenerated...)


inputUpdate : Msg -> Model -> Model
inputUpdate message model =
    let
        (InputMsg inputMessage) =
            message
    in
        { model | inputModel = Input.update inputMessage (.inputModel model) }


inputView : Model -> Html Msg
inputView model =
    model
        |> .inputModel
        |> Input.view [ class "book-search__input", placeholder "Search an Isbn, Title or Author..." ]
        |> App.map InputMsg



-- Model


type alias Model =
    { inputModel : Input.Model
    , results : List Int
    , books : Dict Int Book
    }


type alias Book =
    { id : Int
    , title : String
    , isbn : String
    , thumbnail : String
    , author : List String
    }


books : Dict Int Book
books =
    Dict.fromList
        [ ( 1
          , { id = 1
            , title = "Elixir in action"
            , isbn = "9781617292019"
            , thumbnail = "https://books.google.es/books/content?id=qkfUrQEACAAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE73eD-jPuUmzhRGAqa6IsunKEWtqUk9HDodb7JnT14tTcRFcgsK9SrwWjzpSONc64f1I2Zp0BP3K9h5yITa6u1ccu2jpTg7MAusCQ0YiLNMAcmtnrEfhr4ch4A_K71RwzjGb8Fm3&source=gbs_api"
            , author = [ "Saša Jurić" ]
            }
          )
        , ( 2
          , { id = 2
            , title = "Programming Elixir"
            , isbn = "9781937785581"
            , thumbnail = "https://books.google.es/books/content?id=yLBAjgEACAAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE73OFxV1rz4Y-3pzBu5NP7q8B5WVveLW0VPkp84S2GuJbAcJkpywCQzfyzRjm4u9jYQr2eXi8cjwgUa5sgyVNTd74plLg1X-nMN1JzyZkhA_jH04VglRFdCQa8B2Z4akSMv_ReOO&source=gbs_api"
            , author = [ "Dave Thomas" ]
            }
          )
        , ( 3
          , { id = 3
            , title = "A book with a very very very (I mean a very) long name"
            , isbn = "9781680501452"
            , thumbnail = "https://books.google.es/books/content?id=yLBAjgEACAAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE73OFxV1rz4Y-3pzBu5NP7q8B5WVveLW0VPkp84S2GuJbAcJkpywCQzfyzRjm4u9jYQr2eXi8cjwgUa5sgyVNTd74plLg1X-nMN1JzyZkhA_jH04VglRFdCQa8B2Z4akSMv_ReOO&source=gbs_api"
            , author = [ "Chris McCord", "Bruce Tate", "José Valim" ]
            }
          )
        ]


initModel : Model
initModel =
    { inputModel = Input.initModel
    , results = Dict.keys books
    , books = books
    }



-- Model Helpers


authorString : Book -> String
authorString book =
    (String.join ", " << .author) book


getBook : Model -> Int -> Maybe Book
getBook model id =
    model |> .books |> Dict.get id


shorten : Int -> String -> String
shorten n str =
    if String.length str > n then
        str |> String.slice 0 n >> (\s -> String.append s "...")
    else
        str


shortAuthor : Int -> Book -> String
shortAuthor n book =
    book |> authorString |> shorten n


shortTitle : Int -> Book -> String
shortTitle n book =
    book |> .title |> shorten n



-- Update


type Msg
    = InputMsg Input.Msg


filterRegex : String -> String -> Bool
filterRegex query =
    query
        |> Regex.regex
        >> Regex.caseInsensitive
        >> Regex.contains


filterElement : List (a -> String) -> String -> a -> Bool
filterElement getters query element =
    getters
        |> List.map (\getter -> getter element)
        |> List.map (filterRegex query)
        |> List.foldl (||) False


filterResults : Model -> Model
filterResults model =
    let
        query =
            .inputModel model
    in
        { model
            | results =
                (.books model)
                    |> Dict.values
                    |> List.filter (filterElement [ authorString, .title, .isbn ] query)
                    |> List.map .id
        }


update : Msg -> Model -> Model
update message model =
    case message of
        InputMsg _ ->
            model
                |> inputUpdate message
                |> filterResults



-- View


bookCardView : Book -> Html Msg
bookCardView book =
    div [ class "book-card" ]
        [ img [ class "book-card__image", src <| .thumbnail <| book ]
            []
        , div [ class "book-card__information" ]
            [ div [ class "book-card__title" ] [ text <| shortTitle 18 <| book ]
            , p [ class "book-card__author" ] [ text <| shortAuthor 25 <| book ]
            ]
        ]


bookListView : Model -> Html Msg
bookListView model =
    ul [ class "book-list" ]
        (model
            |> .results
            >> List.filterMap (getBook model)
            >> List.map bookCardView
            >> List.map (\e -> li [ class "book-list__item" ] [ e ])
        )


view : Model -> Html Msg
view model =
    div []
        [ div [ class "book-search" ] [ inputView model ]
        , bookListView model
        ]


main : Program Never
main =
    App.beginnerProgram
        { model = initModel
        , view = view
        , update = update
        }
